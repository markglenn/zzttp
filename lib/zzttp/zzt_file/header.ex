defmodule Zzttp.ZztFile.Header do
  alias Zzttp.ZztFile.ZztString
  alias Zzttp.ZztFile.Keys

  defstruct [
    :world_type,
    :num_boards,
    :player_ammo,
    :player_gems,
    :player_keys,
    :player_health,
    :player_board,
    :player_torches,
    :torch_cycles,
    :energy_cycles,
    :player_score,
    :world_name,
    :flag0,
    :flag1,
    :flag2,
    :flag3,
    :flag4,
    :flag5,
    :flag6,
    :flag7,
    :flag8,
    :flag9,
    :time_passed,
    :time_passed_ticks,
    :locked
  ]

  @type t :: %__MODULE__{
          world_type: :zzt | :super_zzt,
          num_boards: integer(),
          player_ammo: integer(),
          player_gems: integer(),
          player_keys: Keys.t(),
          player_health: integer(),
          player_board: integer(),
          player_torches: integer(),
          torch_cycles: integer(),
          energy_cycles: integer(),
          player_score: integer(),
          world_name: String.t(),
          flag0: String.t(),
          flag1: String.t(),
          flag2: String.t(),
          flag3: String.t(),
          flag4: String.t(),
          flag5: String.t(),
          flag6: String.t(),
          flag7: String.t(),
          flag8: String.t(),
          flag9: String.t(),
          time_passed: integer(),
          time_passed_ticks: integer(),
          locked: boolean()
        }

  @spec load(binary) :: {:ok, t(), binary}
  def load(<<
        0xFF,
        0xFF,
        num_boards::size(16)-unsigned-integer-little,
        player_ammo::size(16)-signed-integer-little,
        player_gems::size(16)-signed-integer-little,
        keys::binary-size(7),
        player_health::size(16)-signed-integer-little,
        player_board::size(16)-signed-integer-little,
        player_torches::size(16)-signed-integer-little,
        torch_cycles::size(16)-signed-integer-little,
        energy_cycles::size(16)-signed-integer-little,
        _::size(16)-signed-integer-little,
        player_score::size(16)-signed-integer-little,
        world_name_string::binary-size(21),
        flag0_string::binary-size(21),
        flag1_string::binary-size(21),
        flag2_string::binary-size(21),
        flag3_string::binary-size(21),
        flag4_string::binary-size(21),
        flag5_string::binary-size(21),
        flag6_string::binary-size(21),
        flag7_string::binary-size(21),
        flag8_string::binary-size(21),
        flag9_string::binary-size(21),
        time_passed::size(16)-signed-integer-little,
        time_passed_ticks::size(16)-signed-integer-little,
        locked::size(8),
        _::binary-size(247),
        rest::binary
      >>) do
    {:ok, keys} = Keys.load(keys)

    {:ok,
     %__MODULE__{
       world_type: :zzt,
       num_boards: num_boards + 1,
       player_ammo: player_ammo,
       player_gems: player_gems,
       player_keys: keys,
       player_health: player_health,
       player_board: player_board,
       player_torches: player_torches,
       torch_cycles: torch_cycles,
       energy_cycles: energy_cycles,
       player_score: player_score,
       world_name: ZztString.from_zzt_string(world_name_string),
       flag0: ZztString.from_zzt_string(flag0_string),
       flag1: ZztString.from_zzt_string(flag1_string),
       flag2: ZztString.from_zzt_string(flag2_string),
       flag3: ZztString.from_zzt_string(flag3_string),
       flag4: ZztString.from_zzt_string(flag4_string),
       flag5: ZztString.from_zzt_string(flag5_string),
       flag6: ZztString.from_zzt_string(flag6_string),
       flag7: ZztString.from_zzt_string(flag7_string),
       flag8: ZztString.from_zzt_string(flag8_string),
       flag9: ZztString.from_zzt_string(flag9_string),
       time_passed: time_passed,
       time_passed_ticks: time_passed_ticks,
       locked: locked != 0
     }, rest}
  end
end
